#include <iostream>
#include <conio.h>
#include <windows.h>

using namespace std;

// Function to set the cursor position in the console window
void co_ordinate(int x, int y) {
    COORD c;
    c.X = x;
    c.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);
}
int main()
{
  //window screen 
const int hor_len=44;
const int ver_len=20;
int batsize=3;

  //initial position of bat
int batpos_left=ver_len/2-batsize/2;

int batpos_right=ver_len/2-batsize/2;

//initial poition of ball
 int ballX = hor_len / 2;
 int ballY = ver_len / 2;

//initial speed of the ball:top left(diagonal)
int ballspd_X = -1;
int ballspd_Y = -1;

//initial score of both players
    int player1score = 0;
    int player2score = 0;


char input;

while (player1score<=10 && player2score<=10) {

        // Display bats
        for (int i = 0; i < batsize; i++) {
            co_ordinate(0, batpos_left + i);
            cout << "|";
            co_ordinate(hor_len - 1, batpos_right + i);
            cout << "|";
        }
// Display ball
        co_ordinate(ballX, ballY);
        cout << "O";
//display score board
co_ordinate(hor_len/2,0);
cout<<"Score:"<<player1score<<"-"<<player2score<<endl;


// Move bats based on input
        if (_kbhit()) {
            input = _getch();

            switch (input) {
            case 's':
                if (batpos_left > 0)
                batpos_left--;
                break;
            case 'x':
                if (batpos_left < ver_len - batsize)
                batpos_left++;
                break;
            case 'k':
                if (batpos_right > 0)
                batpos_right--;
                break;
            case 'm':
                if (batpos_right < ver_len - batsize)
                batpos_right++;
                break;
           case 'b':
                  ballspd_X=0;
                  ballspd_Y=0;
                  break;
           case 'n':
                  ballX = hor_len / 2;
                  ballY = ver_len / 2;
                  ballspd_X = -1;
                  ballspd_Y = -1;
                  break;
            }
        }
 // Move ball
        ballX += ballspd_X;
        ballY += ballspd_Y;

        // Ball collision with walls
        if (ballY == 0 || ballY == ver_len - 1) {
            ballspd_Y = -ballspd_Y;
        }
// Ball collision with bats
        if (ballX == 1 && (ballY >= batpos_left && ballY < batpos_left + batsize)) {
            ballspd_X = -ballspd_X;
        }

        if (ballX == hor_len-2 && (ballY >= batpos_right && ballY < batpos_right + batsize)) {
            ballspd_X = -ballspd_X;
        }

        // Ball out of bounds
        if (ballX < 0) {
            player2score++;
            ballX = hor_len / 2;
            ballY = ver_len / 2;
        }
if (ballX >= hor_len) {
            player1score++;
            ballX = hor_len/ 2;
            ballY = ver_len / 2;
        }

        // Slow down the game a bit
        Sleep(50);

        // Clear the screen
        system("cls");

 
}
cout<<"Game Over!"<<endl;
return 0;
}









